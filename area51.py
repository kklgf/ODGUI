# https://www.edureka.co/blog/tensorflow-object-detection-tutorial/
# 1 import all the libraries
import numpy as np
import os
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow as tf
import zipfile

from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image

sys.path.append("..")
sys.path.append("./Tensorflow/models/research")
from Tensorflow.models.research.object_detection.utils import ops as utils_ops
from Tensorflow.models.research.object_detection.utils import label_map_util
from Tensorflow.models.research.object_detection.utils import visualization_utils as vis_util


#2 provide the required model and the frozen inference graph generated by Tensorflow to use.
MODEL_NAME = 'ssd_mobilenet_v1_coco_2018_01_28'
MODEL_FILE = MODEL_NAME + '.tar.gz'
LOKAL_FROZEN = 'frozen_models/'
DOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'
PATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'
PATH_TO_LABELS = os.path.join('Tensorflow/models/research/object_detection/data/', 'mscoco_label_map.pbtxt')
NUM_CLASSES = 90
IMAGE_SIZE = [480, 640]

#3 download that model from the internet and extract the frozen inference graph of that model
# opener = urllib.request.URLopener()
# # opener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)
# tar_file = tarfile.open(MODEL_FILE)
# for file in tar_file.getmembers():
#     file_name = os.path.basename(file.name)
#     if 'frozen_inference_graph.pb' in file_name:
#         tar_file.extract(file, os.getcwd())


def get_frozen_graph(graph_file):
    """Read Frozen Graph file from disk."""
    with tf.gfile.FastGFile(graph_file, "rb") as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
    return graph_def

# The TensorRT inference graph file downloaded from Colab or your local machine.
pb_fname = os.path.join(os.getcwd(), "ssd_mobilenet_v1_coco_2018_01_28", "frozen_inference_graph.pb")
trt_graph = get_frozen_graph(pb_fname)
detection_graph = trt_graph

detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.GraphDef()
    with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')


#4 load all the labels
label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

#5 convert the images data into a numPy array for processing
def load_image_into_numpy_array(image):
  (im_width, im_height) = image.size
  return np.array(image.getdata()).reshape(
      (im_height, im_width, 3)).astype(np.uint8)


#6 The path to the images for the testing purpose is defined here.
# Here we have a naming convention “image[i]” for i in (1 to n+1),
# n being the number of images provided.
PATH_TO_TEST_IMAGES_DIR = 'test_images'
TEST_IMAGE_PATHS = [os.path.join(PATH_TO_TEST_IMAGES_DIR, 'image{}.jpg'.format(i)) for i in range(1, 8) ]


#7 This code runs the inference for a single image, where it detects the objects,
# make boxes and provide the class and the class score of that particular object.
def run_inference_for_single_image(image, graph):
    with graph.as_default():
        with tf.Session() as sess:
            # Get handles to input and output tensors
            ops = tf.get_default_graph().get_operations()
            all_tensor_names = {output.name for op in ops for output in op.outputs}
            tensor_dict = {}
            for key in ['num_detections', 'detection_boxes', 'detection_scores',
                        'detection_classes', 'detection_masks']:
                tensor_name = key + ':0'
                if tensor_name in all_tensor_names:
                    tensor_dict[key] = tf.get_default_graph().get_tensor_by_name(tensor_name)
            if 'detection_masks' in tensor_dict:
                # The following processing is only for single image
                detection_boxes = tf.squeeze(tensor_dict['detection_boxes'], [0])
                detection_masks = tf.squeeze(tensor_dict['detection_masks'], [0])
                # Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.
                real_num_detection = tf.cast(tensor_dict['num_detections'][0], tf.int32)
                detection_boxes = tf.slice(detection_boxes, [0, 0], [real_num_detection, -1])
                detection_masks = tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])
                detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
                    detection_masks, detection_boxes, image.shape[0], image.shape[1])
                detection_masks_reframed = tf.cast(
                    tf.greater(detection_masks_reframed, 0.5), tf.uint8)
                # Follow the convention by adding back the batch dimension
                tensor_dict['detection_masks'] = tf.expand_dims(detection_masks_reframed, 0)
                image_tensor = tf.get_default_graph().get_tensor_by_name('image_tensor:0')

                # Run inference
                output_dict = sess.run(tensor_dict, feed_dict={image_tensor: np.expand_dims(image, 0)})

                # all outputs are float32 numpy arrays, so convert types as appropriate
                output_dict['num_detections'] = int(output_dict['num_detections'][0])
                output_dict['detection_classes'] = output_dict[
                    'detection_classes'][0].astype(np.uint8)
                output_dict['detection_boxes'] = output_dict['detection_boxes'][0]
                output_dict['detection_scores'] = output_dict['detection_scores'][0]
                if 'detection_masks' in output_dict:
                    output_dict['detection_masks'] = output_dict['detection_masks'][0]
    return output_dict


#8 Our Final loop, which will call all the functions defined above and
# will run the inference on all the input images one by one, which will
# provide us the output of images in which objects are detected with labels
# and the percentage/score of that object being similar to the training data.
for image_path in TEST_IMAGE_PATHS:
  image = Image.open(image_path)
  # the array based representation of the image will be used later in order to prepare the
  # result image with boxes and labels on it.
  image_np = load_image_into_numpy_array(image)
  # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
  image_np_expanded = np.expand_dims(image_np, axis=0)
  # Actual detection.
  output_dict = run_inference_for_single_image(image_np, detection_graph)
  # Visualization of the results of a detection.
  vis_util.visualize_boxes_and_labels_on_image_array(
      image_np,
      output_dict['detection_boxes'],
      output_dict['detection_classes'],
      output_dict['detection_scores'],
      category_index,
      instance_masks=output_dict.get('detection_masks'),
      use_normalized_coordinates=True,
      line_thickness=8)
plt.figure(figsize=IMAGE_SIZE)
plt.imshow(image_np)





############################################################################
#################################### Live Object Detection Using Tensorflow
############################################################################
# import numpy as np
# import os
# import six.moves.urllib as urllib
# import sys
# import tarfile
# import tensorflow as tf
# import zipfile
#
# from collections import defaultdict
# from io import StringIO
# from matplotlib import pyplot as plt
# from PIL import Image
#
# import cv2
#
# cap = cv2.VideoCapture(0)
# sys.path.append("..")
#
# from Tensorflow.models.research.object_detection.utils import label_map_util
# from Tensorflow.models.research.object_detection.utils import visualization_utils as vis_util
#
# MODEL_NAME = 'ssd_mobilenet_v1_coco_11_06_2017'
# MODEL_FILE = MODEL_NAME + '.tar.gz'
# DOWNLOAD_BASE = '<a href="http://download.tensorflow.org/models/object_detection/">http://download.tensorflow.org/models/object_detection/</a>'
#
# # Path to frozen detection graph. This is the actual model that is used for the object detection.
# PATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'
#
# # List of the strings that is used to add correct label for each box.
# PATH_TO_LABELS = os.path.join('data', 'mscoco_label_map.pbtxt')
#
# NUM_CLASSES = 90
#
# opener = urllib.request.URLopener()
# opener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)
# tar_file = tarfile.open(MODEL_FILE)
# for file in tar_file.getmembers():
#     file_name = os.path.basename(file.name)
#     if 'frozen_inference_graph.pb' in file_name:
#         tar_file.extract(file, os.getcwd())
#
# detection_graph = tf.Graph()
# with detection_graph.as_default():
#     od_graph_def = tf.GraphDef()
#     with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
#         serialized_graph = fid.read()
#         od_graph_def.ParseFromString(serialized_graph)
#         tf.import_graph_def(od_graph_def, name='')
#
# label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
# categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
# category_index = label_map_util.create_category_index(categories)
#
# with detection_graph.as_default():
#     with tf.Session(graph=detection_graph) as sess:
#         while True:
#             ret, image_np = cap.read()
#             # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
#             image_np_expanded = np.expand_dims(image_np, axis=0)
#             image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
#             # Each box represents a part of the image where a particular object was detected.
#             boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
#             # Each score represent how level of confidence for each of the objects.
#             # Score is shown on the result image, together with the class label.
#             scores = detection_graph.get_tensor_by_name('detection_scores:0')
#             classes = detection_graph.get_tensor_by_name('detection_classes:0')
#             num_detections = detection_graph.get_tensor_by_name('num_detections:0')
#             # Actual detection.
#             (boxes, scores, classes, num_detections) = sess.run(
#                 [boxes, scores, classes, num_detections],
#                 feed_dict={image_tensor: image_np_expanded})
#             # Visualization of the results of a detection.
#             vis_util.visualize_boxes_and_labels_on_image_array(
#                 image_np,
#                 np.squeeze(boxes),
#                 np.squeeze(classes).astype(np.int32),
#                 np.squeeze(scores),
#                 category_index,
#                 use_normalized_coordinates=True,
#                 line_thickness=8)
#
#             cv2.imshow('object detection', cv2.resize(image_np, (800, 600)))
#             if cv2.waitKey(25) 0xFF == ord('q'):
#                 cv2.destroyAllWindows()
#                 break





















# from keras.applications.mobilenet import MobileNet
# from keras.preprocessing import image
# from keras.applications.mobilenet import preprocess_input, decode_predictions
# import numpy as np
#
# import PIL
# from PIL import Image
# import requests
# from io import BytesIO
#
# # load the model
# model = MobileNet(weights='imagenet', include_top=True)
#
# # chose the URL image that you want
# URL = "https://images.unsplash.com/photo-1529429617124-95b109e86bb8?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60"
#
# # get the image
# response = requests.get(URL)
# img = Image.open(BytesIO(response.content))
# # resize the image according to each model (see documentation of each model)
# img = img.resize((224, 224))
#
# ##############################################
# # if you want to read the image from your PC
# #############################################
# # img_path = 'myimage.jpg'
# # img = image.load_img(img_path, target_size=(299, 299))
# #############################################
#
#
# # convert to numpy array
# x = image.img_to_array(img)
# x = np.expand_dims(x, axis=0)
# x = preprocess_input(x)
#
# features = model.predict(x)
#
# # return the top 20 detected objects
# label = decode_predictions(features, top=20)
# print(label)
#
#
# # # For running inference on the TF-Hub module.
# # import tensorflow as tf
# #
# # import tensorflow_hub as hub
# #
# # # For downloading the image.
# # import matplotlib.pyplot as plt
# # import tempfile
# # from six.moves.urllib.request import urlopen
# # from six import BytesIO
# #
# # # For drawing onto the image.
# # import numpy as np
# # from PIL import Image
# # from PIL import ImageColor
# # from PIL import ImageDraw
# # from PIL import ImageFont
# # from PIL import ImageOps
# #
# # # For measuring the inference time.
# # import time
# #
# # # Print Tensorflow version
# # print(tf.__version__)
# #
# # # Check available GPU devices.
# # print("The following GPU devices are available: %s" % tf.test.gpu_device_name())
# #
# #
# # # Helper functions for downloading images and for visualization.
# # # Visualization code adapted from TF object detection API for the simplest required functionality.
# #
# # def display_image(image):
# #     fig = plt.figure(figsize=(20, 15))
# #     plt.grid(False)
# #     plt.imshow(image)
# #
# #
# # def download_and_resize_image(url, new_width, new_height, display=False):
# #     _, filename = tempfile.mkstemp(suffix=".jpg")
# #     response = urlopen(url)
# #     image_data = response.read()
# #     image_data = BytesIO(image_data)
# #     pil_image = Image.open(image_data)
# #     # pil_image = ImageOps.fit(pil_image, (new_width, new_height), Image.ANTIALIAS)
# #     pil_image_rgb = pil_image.convert("RGB")
# #     pil_image_rgb.save(filename, format="JPEG", quality=90)
# #     print("Image downloaded to %s." % filename)
# #     if display:
# #         display_image(pil_image)
# #     return filename
# #
# #
# # def draw_bounding_box_on_image(image,
# #                                ymin,
# #                                xmin,
# #                                ymax,
# #                                xmax,
# #                                color,
# #                                font,
# #                                thickness=4,
# #                                display_str_list=()):
# #     """Adds a bounding box to an image."""
# #     draw = ImageDraw.Draw(image)
# #     im_width, im_height = image.size
# #     (left, right, top, bottom) = (xmin * im_width, xmax * im_width,
# #                                   ymin * im_height, ymax * im_height)
# #     draw.line([(left, top), (left, bottom), (right, bottom), (right, top),
# #                (left, top)],
# #               width=thickness,
# #               fill=color)
# #
# #     # If the total height of the display strings added to the top of the bounding
# #     # box exceeds the top of the image, stack the strings below the bounding box
# #     # instead of above.
# #     display_str_heights = [font.getsize(ds)[1] for ds in display_str_list]
# #     # Each display_str has a top and bottom margin of 0.05x.
# #     total_display_str_height = (1 + 2 * 0.05) * sum(display_str_heights)
# #
# #     if top > total_display_str_height:
# #         text_bottom = top
# #     else:
# #         text_bottom = bottom + total_display_str_height
# #     # Reverse list and print from bottom to top.
# #     for display_str in display_str_list[::-1]:
# #         text_width, text_height = font.getsize(display_str)
# #         margin = np.ceil(0.05 * text_height)
# #         draw.rectangle([(left, text_bottom - text_height - 2 * margin),
# #                         (left + text_width, text_bottom)],
# #                        fill=color)
# #         draw.text((left + margin, text_bottom - text_height - margin),
# #                   display_str,
# #                   fill="black",
# #                   font=font)
# #         text_bottom -= text_height - 2 * margin
# #
# #
# # def draw_boxes(image, boxes, class_names, scores, max_boxes=10, min_score=0.1):
# #     """Overlay labeled boxes on an image with formatted scores and label names."""
# #     colors = list(ImageColor.colormap.values())
# #
# #     try:
# #         font = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSansNarrow-Regular.ttf",
# #                                   25)
# #     except IOError:
# #         print("Font not found, using default font.")
# #         font = ImageFont.load_default()
# #
# #     for i in range(min(boxes.shape[0], max_boxes)):
# #         if scores[i] >= min_score:
# #             ymin, xmin, ymax, xmax = tuple(boxes[i])
# #             display_str = "{}: {}%".format(class_names[i].decode("ascii"),
# #                                            int(100 * scores[i]))
# #             color = colors[hash(class_names[i]) % len(colors)]
# #             image_pil = Image.fromarray(np.uint8(image)).convert("RGB")
# #             draw_bounding_box_on_image(
# #                 image_pil,
# #                 ymin,
# #                 xmin,
# #                 ymax,
# #                 xmax,
# #                 color,
# #                 font,
# #                 display_str_list=[display_str])
# #             np.copyto(image, np.array(image_pil))
# #     return image
# #
# #
# # # Load a public image from Open Images v4, save locally, and display.
# #
# # image_url = "https://images.unsplash.com/photo-1556761175-4b46a572b786?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=967&amp;q=80"
# # downloaded_image_path = download_and_resize_image(image_url, 1280, 856, True)
# #
# # # FasterRCNN+InceptionResNet V2: high accuracy,
# # module_handle = "https://tfhub.dev/google/openimages_v4/ssd/mobilenet_v2/1"
# #
# # detector = hub.load(module_handle).signatures['default']
# #
# #
# # def load_img(path):
# #     img = tf.io.read_file(path)
# #     img = tf.image.decode_jpeg(img, channels=3)
# #     return img
# #
# #
# # def run_detector(detector, path):
# #     img = load_img(path)
# #
# #     converted_img = tf.image.convert_image_dtype(img, tf.float32)[tf.newaxis, ...]
# #     start_time = time.time()
# #     result = detector(converted_img)
# #     end_time = time.time()
# #
# #     result = {key: value.numpy() for key, value in result.items()}
# #
# #     print("Found %d objects." % len(result["detection_scores"]))
# #     print("Inference time: ", end_time - start_time)
# #
# #     image_with_boxes = draw_boxes(
# #         img.numpy(), result["detection_boxes"],
# #         result["detection_class_entities"], result["detection_scores"])
# #
# #     display_image(image_with_boxes)
# #
# #
# # run_detector(detector, downloaded_image_path)