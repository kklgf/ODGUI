# https://www.edureka.co/blog/tensorflow-object-detection-tutorial/
# 1 import all the libraries
import numpy as np
import os
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow as tf
import zipfile
from copy import deepcopy

from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image

import tkinter
import matplotlib
matplotlib.use('TkAgg')


sys.path.append("..")
sys.path.append("./Tensorflow/models/research")
from Tensorflow.models.research.object_detection.utils import ops as utils_ops
from Tensorflow.models.research.object_detection.utils import label_map_util
from Tensorflow.models.research.object_detection.utils import visualization_utils as vis_util


#2 provide the required model and the frozen inference graph generated by Tensorflow to use.
MODEL_NAME = 'ssd_mobilenet_v1_coco_2018_01_28'
MODEL_FILE = MODEL_NAME + '.tar.gz'
LOKAL_FROZEN = 'frozen_models/'
DOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'
PATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'
PATH_TO_LABELS = os.path.join('Tensorflow/models/research/object_detection/data/', 'mscoco_label_map.pbtxt')
NUM_CLASSES = 90
IMAGE_SIZE = (1200, 900)

###################################Tensorflow/models/research/object_detection/data/mscoco_label_map.pbtxt

import tensorflow as tf
import cv2
import os

def get_frozen_graph(graph_file):
    """Read Frozen Graph file from disk."""
    with tf.gfile.FastGFile(graph_file, "rb") as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
    return graph_def

# The TensorRT inference graph file downloaded from Colab or your local machine.
pb_fname = os.path.join(os.getcwd(), "ssd_mobilenet_v1_coco_2018_01_28", "frozen_inference_graph.pb")
trt_graph = get_frozen_graph(pb_fname)

input_names = ['image_tensor']

# Create session and load graph
tf_config = tf.ConfigProto()
tf_config.gpu_options.allow_growth = True
tf_sess = tf.Session(config=tf_config)
tf.import_graph_def(trt_graph, name='')

tf_input = tf_sess.graph.get_tensor_by_name(input_names[0] + ':0')
tf_scores = tf_sess.graph.get_tensor_by_name('detection_scores:0')
tf_boxes = tf_sess.graph.get_tensor_by_name('detection_boxes:0')
tf_classes = tf_sess.graph.get_tensor_by_name('detection_classes:0')
tf_num_detections = tf_sess.graph.get_tensor_by_name('num_detections:0')


IMAGE_PATH = os.path.join(os.getcwd(), "test_images", "image5.jpg")
image = cv2.imread(IMAGE_PATH)
image = cv2.resize(image, IMAGE_SIZE)

# odwrócenie kolorów z BGR na RGB, bp coś było skopane
im = deepcopy(image)
im[..., 0] = image[..., 2]
im[..., 1] = image[..., 1]
im[..., 2] = image[..., 0]
image = im

scores, boxes, classes, num_detections = tf_sess.run([tf_scores, tf_boxes, tf_classes, tf_num_detections], feed_dict={
    tf_input: image[None, ...]
})
boxes = boxes[0]  # index by 0 to remove batch dimension
scores = scores[0]
classes = classes[0]
num_detections = int(num_detections[0])
print('end')


#4 load all the labels
label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)


# output_dict = run_inference_for_single_image(image_np, detection_graph)
# Visualization of the results of a detection.
vis_util.visualize_boxes_and_labels_on_image_array(
  image,
  boxes,
  classes.astype(int),
  scores,
  category_index,
  min_score_thresh=.66,
  use_normalized_coordinates=True,
  line_thickness=2)

im = image
img = Image.fromarray(im, 'RGB')
img.save('my.png')
img.show()

# strange colors
# img = Image.fromarray(image, 'RGB')
# img.save('my.png')
# img.show()

# nie chce działać
# plt.figure(figsize=IMAGE_SIZE)
# plt.imshow(image_boxes)
# plt.show()
print('end')
